// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Notes_utils$Practice = require("./notes_utils.bs.js");

var _notes = {
  contents: /* [] */0
};

function clearNotes(param) {
  _notes.contents = /* [] */0;
  
}

function loadNotes(param) {
  var notes = localStorage.getItem("notes");
  var loadedNotes = notes !== null ? Notes_utils$Practice.notesFromJson(JSON.parse(notes)) : /* [] */0;
  _notes.contents = List.length(loadedNotes) > 0 ? loadedNotes : ({
        hd: {
          text: "",
          id: "1"
        },
        tl: /* [] */0
      });
  
}

function saveNotes(param) {
  var notesJson = Notes_utils$Practice.notesToJson(_notes.contents);
  localStorage.setItem("notes", notesJson);
  
}

function addNote(note) {
  var id = String(List.length(_notes.contents) + 1 | 0);
  var newNote = {
    text: note.text,
    id: id
  };
  _notes.contents = Pervasives.$at(_notes.contents, {
        hd: newNote,
        tl: /* [] */0
      });
  return newNote;
}

function updateNote(note) {
  _notes.contents = List.map((function (n) {
          if (n.id === note.id) {
            return note;
          } else {
            return n;
          }
        }), _notes.contents);
  return note;
}

function getNotes(param) {
  return _notes.contents;
}

function getNoteById(id) {
  return List.find((function (note) {
                return note.id === id;
              }), _notes.contents);
}

function deleteNote(id) {
  _notes.contents = List.filter(function (n) {
          return n.id !== id;
        })(_notes.contents);
  
}

exports._notes = _notes;
exports.clearNotes = clearNotes;
exports.loadNotes = loadNotes;
exports.saveNotes = saveNotes;
exports.addNote = addNote;
exports.updateNote = updateNote;
exports.getNotes = getNotes;
exports.getNoteById = getNoteById;
exports.deleteNote = deleteNote;
/* No side effect */
