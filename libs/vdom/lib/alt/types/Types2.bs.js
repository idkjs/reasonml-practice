// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");

function $$eval(baseEval, expr) {
  var eval_ = function (expr_) {
    return $$eval(baseEval, expr_);
  };
  switch (expr.TAG | 0) {
    case /* Base */0 :
        return Curry._1(baseEval, expr._0);
    case /* Const */1 :
        return expr._0;
    case /* And */2 :
        return List.for_all(eval_, expr._0);
    case /* Or */3 :
        return List.exists(eval_, expr._0);
    case /* Not */4 :
        return !$$eval(baseEval, expr._0);
    
  }
}

var Logic = {
  $$eval: $$eval
};

var byte1 = {
  hd: 0,
  tl: {
    hd: 1,
    tl: {
      hd: 0,
      tl: {
        hd: 1,
        tl: {
          hd: 0,
          tl: {
            hd: 1,
            tl: {
              hd: 0,
              tl: {
                hd: 1,
                tl: /* [] */0
              }
            }
          }
        }
      }
    }
  }
};

var byte2 = {
  hd: 0,
  tl: {
    hd: 1,
    tl: {
      hd: 0,
      tl: {
        hd: 1,
        tl: {
          hd: 0,
          tl: {
            hd: 1,
            tl: {
              hd: 0,
              tl: {
                hd: 1,
                tl: /* [] */0
              }
            }
          }
        }
      }
    }
  }
};

var sixteenBits_1 = {
  hd: byte2,
  tl: /* [] */0
};

var sixteenBits = {
  hd: byte1,
  tl: sixteenBits_1
};

var expr1 = {
  TAG: /* And */2,
  _0: {
    hd: {
      TAG: /* Const */1,
      _0: true
    },
    tl: {
      hd: {
        TAG: /* Const */1,
        _0: true
      },
      tl: {
        hd: {
          TAG: /* Const */1,
          _0: false
        },
        tl: {
          hd: {
            TAG: /* Const */1,
            _0: true
          },
          tl: /* [] */0
        }
      }
    }
  }
};

function parser(base) {
  return base % 2 === 0;
}

var result1 = $$eval(parser, expr1);

console.log(result1);

exports.Logic = Logic;
exports.byte1 = byte1;
exports.byte2 = byte2;
exports.sixteenBits = sixteenBits;
exports.expr1 = expr1;
exports.parser = parser;
exports.result1 = result1;
/* result1 Not a pure module */
