// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Hashtbl = require("bs-platform/lib/js/hashtbl.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");

function Comp($star) {
  return {};
}

var Impl = {
  Comp: Comp
};

var Props = {};

function equal(a, b) {
  if (Caml_obj.caml_equal(a, b)) {
    return true;
  } else {
    return false;
  }
}

var Cache = Hashtbl.Make({
      equal: equal,
      hash: Hashtbl.hash
    });

function render(props) {
  var count = props.columnCount;
  var headerChildren = Caml_array.caml_make_vect(count, {
        TAG: /* Node */0,
        _0: /* Div */25,
        _1: /* Nil */0,
        _2: /* Nil */0
      });
  return {
          TAG: /* Node */0,
          _0: /* Div */25,
          _1: /* Nil */0,
          _2: /* Children */{
            _0: headerChildren
          }
        };
}

var Header = {
  Props: Props,
  Cache: Cache,
  render: render
};

var myVdom_1 = /* Attrs */{
  _0: [{
      TAG: /* Style */123,
      _0: "color: green"
    }]
};

var myVdom_2 = /* Children */{
  _0: [
    {
      TAG: /* Node */0,
      _0: /* Div */25,
      _1: /* Nil */0,
      _2: /* Nil */0
    },
    render({
          columnCount: 5
        })
  ]
};

var myVdom = {
  TAG: /* Node */0,
  _0: /* Div */25,
  _1: myVdom_1,
  _2: myVdom_2
};

exports.Impl = Impl;
exports.Comp = Comp;
exports.Header = Header;
exports.myVdom = myVdom;
/* Cache Not a pure module */
