// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");

function $less$less(f, x) {
  return Curry._1(f, x);
}

function $less$less$less(f, g, x) {
  return Curry._1(f, Curry._1(g, x));
}

function evaluate(condition, expression) {
  var $$eval = function (expr) {
    return evaluate(condition, expr);
  };
  switch (expression.TAG | 0) {
    case /* Base */0 :
        return Curry._1(condition, expression._0);
    case /* Const */1 :
        return expression._0;
    case /* And */2 :
    case /* Or */3 :
        return List.for_all($$eval, expression._0);
    case /* Not */4 :
        return !evaluate(condition, expression._0);
    
  }
}

var Play = {
  $less$less: $less$less,
  $less$less$less: $less$less$less,
  evaluate: evaluate
};

function validRGB(rgbColor) {
  if (rgbColor.TAG !== /* RGB */0) {
    return ;
  }
  var c = rgbColor._2;
  var b = rgbColor._1;
  var a = rgbColor._0;
  if (a >= 0 && a <= 255 && b >= 0 && b <= 255 && c >= 0 && c <= 255) {
    return {
            TAG: /* RGB */0,
            _0: a,
            _1: b,
            _2: c
          };
  }
  
}

function validRGBA(rgbaColor) {
  if (rgbaColor.TAG !== /* RGBA */1) {
    return ;
  }
  var d = rgbaColor._3;
  var c = rgbaColor._2;
  var b = rgbaColor._1;
  var a = rgbaColor._0;
  if (a >= 0 && a <= 255 && b >= 0 && b <= 255 && c >= 0 && c <= 255 && d >= 0 && d <= 255) {
    return {
            TAG: /* RGBA */1,
            _0: a,
            _1: b,
            _2: c,
            _3: d
          };
  }
  
}

function validColor(color) {
  switch (color.TAG | 0) {
    case /* RGB */0 :
        return validRGB({
                    TAG: /* RGB */0,
                    _0: color._0,
                    _1: color._1,
                    _2: color._2
                  });
    case /* RGBA */1 :
        return validRGBA({
                    TAG: /* RGBA */1,
                    _0: color._0,
                    _1: color._1,
                    _2: color._2,
                    _3: color._3
                  });
    case /* HexRGB */2 :
    case /* HexRGBA */3 :
        return ;
    
  }
}

var myColor = {
  TAG: /* RGB */0,
  _0: 2,
  _1: 68,
  _2: 210
};

exports.Play = Play;
exports.validRGB = validRGB;
exports.validRGBA = validRGBA;
exports.validColor = validColor;
exports.myColor = myColor;
/* No side effect */
